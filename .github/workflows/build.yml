# This is a basic workflow to help you get started with Actions

name: Build and release Expo app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["update_yml"]
  pull_request:
    branches: ["build"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update:
    name: EAS Update
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 🚚 Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm

      - name: 🛠️ Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        run: npm install

      - name: Build APK
        run: eas build --profile preview --platform android --non-interactive --clear-cache

      - name: GET APK URL from EXPO
        run: eas build:list --json --non-interactive --limit=1 --platform=android | jq -r .[0].artifacts.buildUrl

      - name: Store apk download URL in env variable
        run: echo "apk_url=$(eas build:list --json --non-interactive --limit=1 --platform=android | jq -r .[0].artifacts.buildUrl)" >> $GITHUB_ENV

      - name: Download apk file
        uses: suisei-cn/actions-download-file@v1
        id: downloadfile
        with:
          url: "Downloading APK from [this](${{ env.apk_url }})!"
          target: public/
          auto-match: true

      - name: LIST DIR
        run: ls -R

      - uses: thedoctor0/zip-release@master
        with:
          path: public/
          filename: test-app.zip

      - name: Create Release
        id: create-new-release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          git tag v${{ github.run_number }}
          git push --tags

      - name: Get Release ID
        id: get-release-id
        run: |
          RELEASE_ID=$(curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/huynhlan21/test/releases/tags/v${{ github.run_number }}" | jq -r '.id')
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

      - name: Upload asset to Github release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          RELEASE_ID: ${{ env.RELEASE_ID }}
        run: |
          UPLOAD_URL=$(curl -sSL -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/huynhlan21/test/releases/${RELEASE_ID}" | jq -r '.upload_url' | sed 's/{?name,label}//')
          curl -sSL -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/zip" --data-binary "@./test-app.zip" "$UPLOAD_URL?name=test-app-v${{ github.run_number }}.zip"
