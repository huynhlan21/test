# This is a basic workflow to help you get started with Actions

name: Build and release Expo app

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: ["update_yml"]
  pull_request:
    branches: ["build"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: EAS build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🚚 Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm

      - name: 🛠️ Setup Expo and EASE
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Install dependencies
        run: npm install

      - name: 🧪 Run unit tests
        run: npm test

      # - name: Build APK
      #   run: eas build --profile preview --platform android --non-interactive --clear-cache

      # - name: GET APK URL from EXPO
      #   run: eas build:list --json --non-interactive --limit=1 --platform=android | jq -r .[0].artifacts.buildUrl

      # - name: Store APK download URL in env variable
      #   run: echo "APK_URL=$(eas build:list --json --non-interactive --limit=1 --platform=android | jq -r .[0].artifacts.buildUrl)" >> $GITHUB_ENV

      # - name: Download APK file
      #   run: |
      #     wget -O downloaded.apk ${{ env.APK_URL }}
      #     mkdir -p public
      #     mv downloaded.apk public/

      - name: Download APK file
        run: |
          wget -O downloaded.apk https://expo.dev/artifacts/eas/jhDba2fHiueUkaChYeSu2s.apk
          mkdir -p public
          mv downloaded.apk public/

      # - name: LIST DIR
      #   run: ls -R

      - uses: thedoctor0/zip-release@master
        with:
          path: public/
          filename: test-app.zip

      - name: Configure Git Identity
        run: |
          git config --global user.email "${{ vars.USER_EMAIL }}"
          git config --global user.name "${{ vars.USER_NAME }}"

      - name: Create Release
        id: create-new-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git rev-parse --quiet --verify "refs/tags/${{ vars.TAG_NAME }}" >/dev/null; then
            echo "Tag ${{ vars.TAG_NAME }} exists."
            git push origin :refs/tags/${{ vars.TAG_NAME }}
            gh release delete "${{ vars.TAG_NAME }}"
          else
            echo "Tag ${{ vars.TAG_NAME }} does not exist."
          fi
          git tag -a "${{ vars.TAG_NAME }}" -m "${{ vars.RELEASE_NAME }}"
          git push origin "${{ vars.TAG_NAME }}"
          gh release create "${{ vars.TAG_NAME }}"

      - name: Get Release ID
        id: get-release-id
        run: |
          RELEASE_URL="${{ vars.RELEASE_PREFIX }}/tags/${{ vars.TAG_NAME }}"
          RELEASE_ID=$(curl -sSL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $RELEASE_URL | jq -r '.id')
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

      - name: Upload asset to Github release
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          RELEASE_ID: ${{ env.RELEASE_ID }}
        run: |
          UPLOAD_URL=$(curl -sSL -H "Authorization: token $GITHUB_TOKEN" "${{ vars.RELEASE_PREFIX }}/$RELEASE_ID" | jq -r '.upload_url' | sed 's/{?name,label}//')
          curl -sSL -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/zip" --data-binary "@./test-app.zip" "$UPLOAD_URL?name=test-app-v${{ github.run_number }}.zip"
